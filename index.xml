<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KK</title>
    <link>/</link>
    <description>Recent content on KK</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 May 2025 14:52:16 +0800</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>碎碎念</title>
      <link>/ss/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      <guid>/ss/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2025-06-24T09:20:21+08:00&lt;/p&gt;&#xA;&lt;p&gt;草泥马又菜又不好好学习，找人做不舍得花钱事又多，穷蛆能不能死啊，早点投胎得了，抽象完了，弱智东西&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;2025-05-18T12:46:11+08:00&lt;/p&gt;&#xA;&lt;p&gt;发现大多数人对果蛆系统都有些误解，竟然不知道果蛆系统内核是开源的，也不知道在Linux上也一样可以开发果蛆系统的App&lt;/p&gt;</description>
    </item>
    <item>
      <title>友接</title>
      <link>/link/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      <guid>/link/</guid>
      <description>&lt;p&gt;clark &lt;a href=&#34;https://clarkqwq.top&#34;&gt;https://clarkqwq.top&lt;/a&gt; 开发大手子，web相关的开发很强&lt;/p&gt;&#xA;&lt;p&gt;zznq &lt;a href=&#34;https://blog.imipy.com&#34;&gt;https://blog.imipy.com&lt;/a&gt; 我儿子&lt;/p&gt;&#xA;&lt;p&gt;色妹妹 &lt;a href=&#34;https://sbchild.top/blog&#34;&gt;https://sbchild.top/blog&lt;/a&gt; 网上遇到的魔幻小男娘&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于</title>
      <link>/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      <guid>/about/</guid>
      <description>&lt;p&gt;我是你爹&lt;/p&gt;</description>
    </item>
    <item>
      <title>LuckySpeeder-解</title>
      <link>/post/ios_dev1/</link>
      <pubDate>Fri, 16 May 2025 14:52:16 +0800</pubDate>
      <guid>/post/ios_dev1/</guid>
      <description>&lt;p&gt;这篇文章记录 LuckySpeeder 的开发过程，是如何在非越狱的 iOS 中实现的。&lt;/p&gt;&#xA;&lt;p&gt;这篇文章需要懂一些 ARM64架构、Mach-O 文件格式、链接器、内存、UI渲染逻辑、UI层级设计等各种乱七八糟的知识。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 吐槽</title>
      <link>/post/fuckrust/</link>
      <pubDate>Mon, 09 Dec 2024 17:28:17 +0800</pubDate>
      <guid>/post/fuckrust/</guid>
      <description>&lt;p&gt;此文章可能引起不适，如果有 Rust 小鬼路过千万千万千万不要试图进来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>狗草的网易雷火，司马东西</title>
      <link>/post/fuckleihuo/</link>
      <pubDate>Sat, 30 Nov 2024 18:31:21 +0800</pubDate>
      <guid>/post/fuckleihuo/</guid>
      <description>&lt;p&gt;此文可能引起不适，网易雷火的狗千万别点进来&lt;/p&gt;</description>
    </item>
    <item>
      <title>双城之战2 吐槽</title>
      <link>/post/lol_as2/</link>
      <pubDate>Sun, 24 Nov 2024 13:12:21 +0800</pubDate>
      <guid>/post/lol_as2/</guid>
      <description>&lt;p&gt;此文可能引起不适，上城废物/导演养的狗/双城吹子 千万别点进来&lt;/p&gt;</description>
    </item>
    <item>
      <title>c&#43;&#43;23 吐槽</title>
      <link>/post/cpp23_ranges/</link>
      <pubDate>Sun, 24 Nov 2024 12:08:21 +0800</pubDate>
      <guid>/post/cpp23_ranges/</guid>
      <description>&lt;p&gt;此文章可能引起不适，如果有路过的只写过 C++ 的脑残傻逼别点进来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust调用ios私有API</title>
      <link>/post/rust-hackdev-ios/</link>
      <pubDate>Mon, 21 Oct 2024 04:10:43 +0800</pubDate>
      <guid>/post/rust-hackdev-ios/</guid>
      <description>&lt;p&gt;以 &lt;code&gt;SpringBoardServices&lt;/code&gt; 为例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>是什么(写入/访问)了这个地址</title>
      <link>/post/bpaddr/</link>
      <pubDate>Sat, 14 Sep 2024 15:53:21 +0800</pubDate>
      <guid>/post/bpaddr/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;这篇文章只是记录我在编写程序时遇到问题的解决过程，文章最下方会放代码链接。&lt;/p&gt;</description>
    </item>
    <item>
      <title>编写一个通用指针搜索器（2）</title>
      <link>/post/pointersearch2/</link>
      <pubDate>Fri, 19 Jan 2024 22:30:11 +0800</pubDate>
      <guid>/post/pointersearch2/</guid>
      <description>&lt;p&gt;！！！注意，这篇文章中提到的性能优化方式基本仅适用于指针链扫描，不适用其它业务。&lt;/p&gt;&#xA;&lt;p&gt;！！！这篇文章并不是接着上一篇文章写的，但有很多关联，不过很多代码，逻辑，已经发生变化。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lazy_static! { static ref My }</title>
      <link>/post/lazy_static_my/</link>
      <pubDate>Wed, 06 Sep 2023 19:39:52 +0800</pubDate>
      <guid>/post/lazy_static_my/</guid>
      <description></description>
    </item>
    <item>
      <title>编写一个通用指针搜索器（1）</title>
      <link>/post/pointersearch1/</link>
      <pubDate>Tue, 27 Jun 2023 10:43:52 +0800</pubDate>
      <guid>/post/pointersearch1/</guid>
      <description>&lt;h1 id=&#34;什么是指针搜索&#34;&gt;什么是指针搜索&lt;/h1&gt;&#xA;&lt;p&gt;ASLR导致程序内存地址在启动程序时始终不同。所谓的“静态”地址是相对于程序代码（BinaryFile）的地址。有了静态地址，一旦找到它，你就可以稳定计算出这个地址，因为加载程序（BinaryFile）的地址很容易找到。不幸的是，并非所有感兴趣的内存都是“静态的”，因为这些要么需要代码黑客（通常称为ASM HACK），要么需要指针链（找到此链的过程通常被称为指针搜索）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go-Rust 编译器优化对比</title>
      <link>/post/goasm1/</link>
      <pubDate>Mon, 26 Jun 2023 10:46:46 +0800</pubDate>
      <guid>/post/goasm1/</guid>
      <description>&lt;h1 id=&#34;go&#34;&gt;Go&lt;/h1&gt;&#xA;&lt;p&gt;release模式 编译为x86-64&lt;/p&gt;&#xA;&lt;p&gt;我不知道Go除了使用 &lt;code&gt;go build file.go&lt;/code&gt; 是否还有其它命令才能真正编译为release模式&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setBit1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nx&#34;&gt;bitToSet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;^(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bitToSet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;^(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;它生成的汇编是什么样的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/post/nat_hole_punching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/post/nat_hole_punching/</guid>
      <description>&lt;h1 id=&#34;nat-种类&#34;&gt;NAT 种类&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;NAT有4个类型，它们分别是：NAT1、NAT2、NAT3、NAT4。从 NAT1 至 NAT4 限制越来越多。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;nat1-完全圆锥形natfull-cone-nat&#34;&gt;NAT1 完全圆锥形NAT（Full Cone NAT）&lt;/h2&gt;&#xA;&lt;p&gt;完全圆锥型NAT把一个来自内部IP地址和端口的所有请求，始终映射到相同的外网IP地址和端口；同时，任意外部主机向该映射的外网IP地址和端口发送报文，都可以实现和内网主机进行通信，就像一个向外开口的圆锥形一样，故得名。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
